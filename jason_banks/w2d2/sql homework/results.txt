1. Selects the names of all products that are not on sale.

    sqlite> select name from products where on_sale = 'f';
    Teddy Bear
    Cat Ears
    Card Against Humanity
    Set of 12 Mason Jars

2. Selects the names of all products that cost less than £20.

    sqlite> select name from products where price < 20;
    Teddy Bear
    The Ruby Programming Language
    Silicon Valley Monopoly
    Set of 12 Mason Jars

3. Selects the name and price of the most expensive product.

    sqlite> select name, MAX(price) from products;
    Cat Ears|99.99

    Pavling: select name, price from products order by price desc limit 1;

4. Selects the name and price of the second most expensive product.

    sqlite> select name, max(price) from products where price < (select max(price) from products);
    Brown Leather Boots|82.0

    Pavling: select name, price from products order by price desc limit 1, 1;
    --> limit 1, 1 ==> limit by skipping 1, giving 1 response
    --> limit 3, 1 ==> limit by skipping 3, giving 1 response
    --> Pavling's avoids certain issues in Postgres, but might be bad if there are multiple products with the most expensive price

5. Selects the name and price of the least expensive product.

    sqlite> select name, min(price) from products;
    Set of 12 Mason Jars|6.22

6. Selects the names and prices of all products, ordered by price in descending order.

    sqlite> select name, price from products order by products.price desc;
    Cat Ears|99.99
    Brown Leather Boots|82.0
    Lonely Pillow|78.82
    Card Against Humanity|25.0
    Hoodie|25.0
    Set of silverware|22.99
    The Ruby Programming Language|19.99
    Teddy Bear|17.99
    Silicon Valley Monopoly|10.99
    Set of 12 Mason Jars|6.22

7. Selects the average price of all products.

    sqlite> select avg(price) from products;
    38.899

    Pavling: notes this gives the mean, but would not work if you wanted the median or mode

8. Selects the sum of the price of all products.

    sqlite> select sum(price) from products;
    388.99

9. Selects the sum of the price of all products whose prices is less than £20.

    sqlite> select sum(price) from products where price < 20;
    55.19

10. Selects the id of the user with your name.

    sqlite> select id from users where name = 'Jason Banks';
    5

11. Selects the names of all users whose names start with the letter "S".

    sqlite> select name from users where name like 'S%';
    Sam Hill
    Scott Gammon

12. Selects the number of users whose first names are "Jonathan".

    sqlite> select count(id) from users where name like 'Jonathan %';
    2

13. Selects the number of users who want a "Teddy Bear".

    sqlite> select count(wishlists.user_id) from users join wishlists on users.id = wishlists.user_id join products on wishlists.product_id = products.id where products.name = 'Teddy Bear';
    6

    Pavling: there are different types of joins: inner/outer, left/right, full -- think of a 2-circle venn diagram
    http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/

14. Selects the count of items on the wishlish of the user with your name.

    sqlite> SELECT COUNT(users.id) FROM users JOIN wishlists ON users.id = wishlists.user_id WHERE users.name = 'Jason Banks';
    4

15. Selects the count and name of all products on the wishlist, ordered by count in descending order.

    sqlite> select products.name, count(wishlists.product_id) from wishlists join products on products.id = wishlists.product_id group by wishlists.product_id order by count(wishlists.product_id) desc;
    Hoodie|18
    Card Against Humanity|16
    Cat Ears|15
    The Ruby Programming Language|9
    Teddy Bear|6
    Silicon Valley Monopoly|5
    Brown Leather Boots|4
    Lonely Pillow|2
    Set of 12 Mason Jars|2

16. Selects the count and name of all products that are not on sale on the wishlist, ordered by count in descending order.

    sqlite> select name, count_items from (select products.name, products.on_sale, count(wishlists.product_id) as count_items from wishlists join products on products.id = wishlists.product_id group by wishlists.product_id order by count(wishlists.product_id) desc) where on_sale = 'f';
    Card Against Humanity|16
    Cat Ears|15
    Teddy Bear|6
    Set of 12 Mason Jars|2

17. Inserts a user with the name "Jonathan Anderson" into the users table. Ensure the created_at column is set to the current time.

    N.B.: Time is set to GMT, not sure how to get it to BST (but maybe staying still at GMT is better?).

    sqlite> insert into users (created_at, name) values (current_timestamp, 'Jonathan Anderson');
    sqlite> .schema users
    CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime, "name" varchar(255));
    sqlite> select * from users
       ...> ;
    1|2013-04-01 20:09:41.926399|Ben Kennedy
    2|2013-04-01 20:09:41.932863|Chris Williams
    3|2013-04-01 20:09:41.934730|Dan Bell
    4|2013-04-01 20:09:41.936167|Hana Kim
    5|2013-04-01 20:09:41.937655|Jason Banks
    6|2013-04-01 20:09:41.938977|Louie Christie
    7|2013-04-01 20:09:41.940520|Mike Harris
    8|2013-04-01 20:09:41.942043|Niraj Vyas
    9|2013-04-01 20:09:41.943542|Noor Binladin
    10|2013-04-01 20:09:41.945032|Paul Varga
    11|2013-04-01 20:09:41.946512|Sam Hill
    12|2013-04-01 20:09:41.947799|Scott Gammon
    13|2013-04-01 20:09:41.949360|Jonathan Lai
    14|2013-04-01 20:09:41.951026|Michael Pavling
    15|2013-04-01 20:09:41.952509|Jeffrey Kao
    16|2013-04-01 20:09:41.954097|Livien Yin
    17|2013-04-01 20:09:41.955608|Eu-wen Ding
    18|2013-04-01 20:09:41.956888|Rob Colby
    19|2013-04-01 20:09:41.958401|Michelle Lowe
    20|2013-04-01 20:09:41.959834|Bryan Chang
    21|2013-04-01 20:09:41.961268|Matt Cano
    24|2013-06-25 09:18:53|Jonathan Postel 2
    25|2014-04-08 19:38:54|Jonathan Anderson


18. Selects the id of the user with the name "Jonathan Anderson"?  Ensure the created_at column is set to the current time.

    N.B.: the below worked, but I don't understand why "select id from users wheree..." returned nothing (it just went to the next line). I understand that there are multiple things named "id", but I am only looking at the users table.

    sqlite> select users.id from users where name = 'Jonathan Anderson';
    25

19. Inserts a wishlist entry for the user with the name "Jonathan Anderson" for the product "The Ruby Programming Language".

    sqlite> insert into wishlists (created_at, user_id, product_id) values (current_timestamp, 25, 4);
    sqlite> select * from wishlists
       ...> ;
    1|2013-04-01 20:09:41.992086|13|1
    2|2013-04-01 20:09:41.994331|20|1
    3|2013-04-01 20:09:41.996116|8|1
    4|2013-04-01 20:09:41.997623|3|1
    5|2013-04-01 20:09:41.999175|14|1
    6|2013-04-01 20:09:42.000721|12|1
    7|2013-04-01 20:09:43.003729|20|2
    8|2013-04-01 20:09:43.007691|19|2
    9|2013-04-01 20:09:44.011114|20|3
    10|2013-04-01 20:09:44.014956|14|3
    11|2013-04-01 20:09:44.016846|1|3
    12|2013-04-01 20:09:44.018566|4|3
    13|2013-04-01 20:09:44.020181|12|3
    14|2013-04-01 20:09:44.021561|2|3
    15|2013-04-01 20:09:44.023068|8|3
    16|2013-04-01 20:09:44.024684|3|3
    17|2013-04-01 20:09:44.026332|15|3
    18|2013-04-01 20:09:44.027857|5|3
    19|2013-04-01 20:09:44.029529|21|3
    20|2013-04-01 20:09:44.031009|10|3
    21|2013-04-01 20:09:44.032579|18|3
    22|2013-04-01 20:09:44.034127|13|3
    23|2013-04-01 20:09:44.035596|6|3
    24|2013-04-01 20:09:45.037887|4|4
    25|2013-04-01 20:09:45.042297|19|4
    26|2013-04-01 20:09:45.044506|1|4
    27|2013-04-01 20:09:45.046527|15|4
    28|2013-04-01 20:09:45.048236|8|4
    29|2013-04-01 20:09:45.049798|10|4
    30|2013-04-01 20:09:45.051640|5|4
    31|2013-04-01 20:09:45.053431|7|4
    32|2013-04-01 20:09:45.055203|9|4
    33|2013-04-01 20:09:46.058509|20|5
    34|2013-04-01 20:09:46.062683|9|5
    35|2013-04-01 20:09:46.064941|16|5
    36|2013-04-01 20:09:46.066884|18|5
    37|2013-04-01 20:09:46.068675|6|5
    38|2013-04-01 20:09:47.071678|12|6
    39|2013-04-01 20:09:47.075914|19|6
    40|2013-04-01 20:09:47.078063|9|6
    41|2013-04-01 20:09:47.079884|8|6
    42|2013-04-01 20:09:47.081674|17|6
    43|2013-04-01 20:09:47.083447|20|6
    44|2013-04-01 20:09:47.085369|6|6
    45|2013-04-01 20:09:47.087102|15|6
    46|2013-04-01 20:09:47.088755|11|6
    47|2013-04-01 20:09:47.090416|2|6
    48|2013-04-01 20:09:47.091758|3|6
    49|2013-04-01 20:09:47.093379|5|6
    50|2013-04-01 20:09:47.095009|13|6
    51|2013-04-01 20:09:47.096655|18|6
    52|2013-04-01 20:09:47.098127|4|6
    53|2013-04-01 20:09:47.099624|14|6
    54|2013-04-01 20:09:48.102795|10|7
    55|2013-04-01 20:09:48.106218|19|7
    56|2013-04-01 20:09:48.108471|11|7
    57|2013-04-01 20:09:48.110421|17|7
    58|2013-04-01 20:09:49.113368|5|8
    59|2013-04-01 20:09:49.116253|21|8
    60|2013-04-01 20:09:49.117708|3|8
    61|2013-04-01 20:09:49.119007|16|8
    62|2013-04-01 20:09:49.120291|14|8
    63|2013-04-01 20:09:49.121672|4|8
    64|2013-04-01 20:09:49.123139|17|8
    65|2013-04-01 20:09:49.124425|8|8
    66|2013-04-01 20:09:49.125716|7|8
    67|2013-04-01 20:09:49.127322|13|8
    68|2013-04-01 20:09:49.128746|2|8
    69|2013-04-01 20:09:49.130055|6|8
    70|2013-04-01 20:09:49.131302|9|8
    71|2013-04-01 20:09:49.132546|20|8
    72|2013-04-01 20:09:49.133824|15|8
    73|2013-04-01 20:09:49.135149|10|8
    74|2013-04-01 20:09:49.136802|1|8
    75|2013-04-01 20:09:49.138312|19|8
    76|2013-04-01 20:09:50.141354|19|9
    77|2013-04-01 20:09:50.145741|10|9
    81|2014-04-08 19:50:58|25|4


20. Updates the name of the "Jonathan Anderson" user to be "Jon Anderson".

    sqlite> update users set name = 'Jon Anderson' where name = 'Jonathan Anderson';
    sqlite> select * from users name like 'Jon%';
    Error: near "like": syntax error
    sqlite> select * from users where name like 'Jon%';
    13|2013-04-01 20:09:41.949360|Jonathan Lai
    24|2013-06-25 09:18:53|Jonathan Postel 2
    25|2014-04-08 19:38:54|Jon Anderson
    sqlite> 

21. Deletes the user with the name "Jon Anderson".

    sqlite> delete from users where name = 'Jon Anderson';
    sqlite> select * from users where name like 'Jon%';
    13|2013-04-01 20:09:41.949360|Jonathan Lai
    24|2013-06-25 09:18:53|Jonathan Postel 2
    sqlite> 

22. Deletes the wishlist item for the user you just deleted.

    sqlite> delete from wishlists where user_id = 25;
    sqlite> select * from wishlists where id > 70;
    71|2013-04-01 20:09:49.132546|20|8
    72|2013-04-01 20:09:49.133824|15|8
    73|2013-04-01 20:09:49.135149|10|8
    74|2013-04-01 20:09:49.136802|1|8
    75|2013-04-01 20:09:49.138312|19|8
    76|2013-04-01 20:09:50.141354|19|9
    77|2013-04-01 20:09:50.145741|10|9
    sqlite> 
